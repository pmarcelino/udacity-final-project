---
version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - echo 'about to call dockerd'
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
      - curl -LO https://dl.k8s.io/release/v1.27.1/bin/linux/amd64/kubectl
      - curl -LO "https://dl.k8s.io/v1.27.1/bin/linux/amd64/kubectl.sha256"
      - echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      - python --version
      - echo 'export PATH=$PWD/:$PATH' >> $HOME/.bashrc
      - echo `kubectl version --short --client`
      - python -m pip install --upgrade --force pip
      - apt-get update && apt-get -y install jq  && pip install --upgrade awscli
      - curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - chmod +x /usr/local/bin/docker-compose
      - docker-compose --version
  pre_build:
    commands:
      - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - echo $AWS_DEFAULT_REGION
      - echo $REPOSITORY_URI_BACKEND
      - echo $REPOSITORY_URI_FRONTEND
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI_BACKEND
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI_FRONTEND
      - export KUBECONFIG=$HOME/.kube/config
      - echo `ls -l`
      - echo AUTH0_USERNAME=$(aws ssm get-parameter --name AUTH0_USERNAME --query 'Parameter.Value' --output text) > backend/.env.docker
      - echo AUTH0_PASSWORD=$(aws ssm get-parameter --name AUTH0_PASSWORD --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo AUTH0_CLIENT_ID=$(aws ssm get-parameter --name AUTH0_CLIENT_ID --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo AUTH0_CLIENT_SECRET=$(aws ssm get-parameter --name AUTH0_CLIENT_SECRET --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo AUTH0_CLIENT_ID_TEST=$(aws ssm get-parameter --name AUTH0_CLIENT_ID_TEST --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo AUTH0_CLIENT_SECRET_TEST=$(aws ssm get-parameter --name AUTH0_CLIENT_SECRET_TEST --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo AUTH0_DOMAIN=$(aws ssm get-parameter --name AUTH0_DOMAIN --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo ALGORITHMS=$(aws ssm get-parameter --name ALGORITHMS --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo API_AUDIENCE=$(aws ssm get-parameter --name API_AUDIENCE --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo SECRET_KEY=$(aws ssm get-parameter --name SECRET_KEY --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo SQLALCHEMY_DATABASE_URI=$(aws ssm get-parameter --name SQLALCHEMY_DATABASE_URI --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo SQLALCHEMY_TRACK_MODIFICATIONS=$(aws ssm get-parameter --name SQLALCHEMY_TRACK_MODIFICATIONS --query 'Parameter.Value' --output text) >> backend/.env.docker
      - echo REACT_APP_AUTH0_DOMAIN=$(aws ssm get-parameter --name REACT_APP_AUTH0_DOMAIN --query 'Parameter.Value' --output text) > frontend/.env.docker
      - echo REACT_APP_AUTH0_CLIENT_ID=$(aws ssm get-parameter --name REACT_APP_AUTH0_CLIENT_ID --query 'Parameter.Value' --output text) >> frontend/.env.docker
      - echo REACT_APP_AUTH0_AUDIENCE=$(aws ssm get-parameter --name REACT_APP_AUTH0_AUDIENCE --query 'Parameter.Value' --output text) >> frontend/.env.docker
  build:
    commands:
      - docker-compose build
      - docker tag backend $REPOSITORY_URI_BACKEND:$TAG
      - docker tag frontend $REPOSITORY_URI_FRONTEND:$TAG
  post_build:
    commands:
      - docker push $REPOSITORY_URI_BACKEND:$TAG
      - docker push $REPOSITORY_URI_FRONTEND:$TAG
      - echo $EKS_CLUSTER_NAME
      - echo $EKS_KUBECTL_ROLE_ARN
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
      - kubectl apply -f postgres-pvc.yaml
      - kubectl apply -f postgres_kubernetes.yaml
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI_BACKEND:$TAG"'@' backend_kubernetes.yml
      - kubectl apply -f backend_kubernetes.yml
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI_FRONTEND:$TAG"'@' frontend_kubernetes.yml
      - kubectl apply -f frontend_kubernetes.yml
      - rm backend/.env.docker
      - rm frontend/.env.docker
      - printf '[{"name":"backend","imageUri":"% s"},{"name":"frontend","imageUri":"%s"}]' $REPOSITORY_URI_FRONTEND:$TAG $REPOSITORY_URI_BACKEND:$TAG > build.json
artifacts:
  files: build.json
env:
  parameter-store:
    AUTH0_USERNAME: AUTH0_USERNAME
    AUTH0_PASSWORD: AUTH0_PASSWORD
    AUTH0_CLIENT_ID: AUTH0_CLIENT_ID
    AUTH0_CLIENT_SECRET: AUTH0_CLIENT_SECRET
    AUTH0_CLIENT_ID_TEST: AUTH0_CLIENT_ID_TEST
    AUTH0_CLIENT_SECRET_TEST: AUTH0_CLIENT_SECRET_TEST
    AUTH0_DOMAIN: AUTH0_DOMAIN
    ALGORITHMS: ALGORITHMS
    API_AUDIENCE: API_AUDIENCE
    SECRET_KEY: SECRET_KEY
    SQLALCHEMY_DATABASE_URI: SQLALCHEMY_DATABASE_URI
    SQLALCHEMY_TRACK_MODIFICATIONS: SQLALCHEMY_TRACK_MODIFICATIONS
    REACT_APP_AUTH0_DOMAIN: REACT_APP_AUTH0_DOMAIN
    REACT_APP_AUTH0_CLIENT_ID: REACT_APP_AUTH0_CLIENT_ID
    REACT_APP_AUTH0_AUDIENCE: REACT_APP_AUTH0_AUDIENCE
